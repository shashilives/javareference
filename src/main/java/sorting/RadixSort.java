package sorting;import java.util.*;import java.util.stream.Stream;public class RadixSort {    public static void main(String[] args) {        int[] a = new int[]{1987, 45, 19, 8, 456, 987, 12};        List<Integer> arrList = new ArrayList<>();        int maxLength = maxDigit(a);        Arrays.stream(a).forEach(item -> arrList.add(item));        sort(arrList, maxLength);    }    static List<Integer> sort(List<Integer> numList, int maxLength) {        // Outer digit loop from 0 to N        for (int k = 0; k < maxLength; k++) {            Map<Integer, List<Integer>> map = initMap();            // loop through each element in the array and put the min their bucket            for (int arrayItemPos = 0; arrayItemPos < numList.size(); arrayItemPos++) {                int mapPos = getDigitAtPost(numList.get(arrayItemPos), k);                map.get(mapPos).add(numList.get(arrayItemPos));            }            List<Integer> temp = new ArrayList<>();            map.keySet().stream().map(key -> map.get(key))                    .forEach(listOfInt -> {                        listOfInt.stream().forEach(item -> temp.add(item));                    });            System.out.println(temp);            numList.clear();            numList = temp;        }        return numList;    }    static Map<Integer, List<Integer>> initMap() {        Map<Integer, List<Integer>> map = new HashMap<>(10);        for (int i = 0; i < 10; i++) {            map.put(i, new ArrayList<>());        }        return map;    }    static int getDigitCount(int num) {        int i = 0;        while (num > 0) {            num = num / 10;            i++;        }        return i;    }    static int maxDigit(int[] a) {        int max = 0;        for (int i = 0; i < a.length; i++) {            int dc = getDigitCount(a[i]);            if (max < dc) {                max = dc;            }        }        return max;    }    static int getDigitAtPost(int num, int pos) {        return                (int) (num / Math.pow(10, pos)) % 10;    }}