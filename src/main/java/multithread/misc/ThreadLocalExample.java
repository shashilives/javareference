package multithread.misc;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.stream.IntStream;public class ThreadLocalExample {    // Thread local is used to avoid creating multiple objects inside the Task    // Objects which are created via thread local -- are created only one per Thread ==> NOT Global or Not Unique always    public static void main(String[] args) {        ExecutorService executorService = Executors.newFixedThreadPool(2);        for (int i = 0; i < 6; i++) {            executorService.execute(new RunnableExample());        }        executorService.shutdown();    }    static class RunnableExample implements Runnable {        @Override        public void run() {            Test test = ThreadLocalProvider.testObj.get();            IntStream.range(1, 100).sum();            System.out.println(Thread.currentThread() + " - " + test);        }    }    static class ThreadLocalProvider {        static ThreadLocal<Test> testObj = new ThreadLocal<Test>() {            @Override            protected Test initialValue() {                return new Test();            }            @Override            public Test get() {                return super.get();            }        };    }    static class Test {        public Test() {            System.out.println("Test Obj Create invoked");        }    }}