package datastructaures.sll;public class SinglyLinkedList<T> {    int lenght;    Node head;    Node tail;    public void push(T value) {        Node node = new Node(value);        if (this.head == null) {            this.head = node;            this.tail = head;        } else {            this.tail.next = node;            this.tail = node;        }        this.lenght++;    }    public void remove() {        if (this.head == null) {            System.out.println("Empty list");        } else if (this.head == this.tail) {            this.head = null;            this.tail = null;            return;        } else {            Node curr = this.head;            Node prev = curr;            while (curr.next != null) {                prev = curr;                curr = curr.next;            }            this.tail = prev;            prev.next = null;            return;        }    }    public Node shift() {        Node node = new Node(null);        if (this.head == null) {            System.out.println("SLL is empty");        } else if (this.head == this.tail) {            node = this.head;            this.head = this.tail = null;        } else {            node = this.head;            this.head = this.head.next;        }        return node;    }    public void unshift(T value) {        Node node = new Node(value);        Node currHead = this.head;        this.head = node;        node.next = currHead;    }    public Node get(int pos) {        Node currNode = new Node(null);        if (pos < 0 || pos >= lenght - 1) {            System.out.println("GET position specified is outside the scope");            return null;        }        currNode = this.head;        for (int i = 0; i < pos; i++)            currNode = currNode.next;        return currNode;    }    public void insert(int pos, T value) {    }    public void reverse(SinglyLinkedList sll) {//        swap head and tail        Node node = sll.head;        sll.head = sll.tail;        sll.tail = node;        Node prev = null;        Node next = null;        for (int i = 0; i < sll.lenght; i++) {            next = node.next;            node.next = prev;            prev = node;            node = next;        }        return;    }}