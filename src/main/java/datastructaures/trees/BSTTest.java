package datastructaures.trees;import java.util.List;import java.util.stream.Collectors;public class BSTTest {    public static void main(String[] args) throws Exception {        BinarySearchTree bst = createBST();        System.out.println("---- Find ----");        System.out.println(bst.contains(2));        performBreadthFirstSearch(bst);        DFSPreOrderTraversalTest(bst);        DFSPostOrderTraversalTest(bst);        DFSInOrderTraversalTest(bst);    }    static public BinarySearchTree createBST() throws Exception {        BinarySearchTree bst = new BinarySearchTree(null);        bst.insert(10);        bst.insert(5);        bst.insert(13);        bst.insert(11);        bst.insert(2);        bst.insert(16);        bst.insert(7);        System.out.println("---- Insert ----");        System.out.println(bst.root);        System.out.println(bst.root.left);        System.out.println(bst.root.right);        return bst;    }    static public void performBreadthFirstSearch(BinarySearchTree bst) {        BreadthFirstSearch bfs = new BreadthFirstSearch();        List<Node> bfsList = bfs.bfs(bst);        System.out.println("---- Breadth First Search Output ----");        System.out.println(bfsList.stream().map(n -> n.value).collect(Collectors.toList()));    }    static public void DFSPreOrderTraversalTest(BinarySearchTree bst) {        DFSPreOrderTraversal dfs = new DFSPreOrderTraversal();        System.out.println("---- DFSPreOrderTraversalTest Search Output ----");        System.out.println(dfs.dfsPreOrder(bst.root).stream().map(n -> n.value).collect(Collectors.toList()));    }    static public void DFSPostOrderTraversalTest(BinarySearchTree bst) {        DFSPostOrderTraversal dfs = new DFSPostOrderTraversal();        System.out.println("---- DFSPostOrderTraversalTest Search Output ----");        System.out.println(dfs.dfsPostOrder(bst.root).stream().map(n -> n.value).collect(Collectors.toList()));    }    static public void DFSInOrderTraversalTest(BinarySearchTree bst) {        DSFInOrderTraversal dfs = new DSFInOrderTraversal();        System.out.println("---- DFSInOrderTraversalTest Search Output ----");        System.out.println(dfs.dfsInOrder(bst.root).stream().map(n -> n.value).collect(Collectors.toList()));    }}