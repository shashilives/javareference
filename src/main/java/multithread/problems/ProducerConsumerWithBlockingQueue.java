package multithread.problems;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.BlockingQueue;public class ProducerConsumerWithBlockingQueue {    static BlockingQueue<String> queue = new ArrayBlockingQueue<>(5);    public static void main(String[] args) throws InterruptedException {        Runnable producer = () -> {            while (true) {                try {                    queue.add("Item : "+System.currentTimeMillis());                    Thread.sleep(900);                    System.out.println(Thread.currentThread() + " Item Added "+queue.remainingCapacity());                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        };        Runnable consumer = () -> {            while (true) {                try {                    System.out.println(queue.take());                    Thread.sleep(1500);                    System.out.println(Thread.currentThread() + " Item Removed "+queue.remainingCapacity());                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        };        new Thread(producer).start();        Thread.sleep(200);        new Thread(producer).start();        new Thread(consumer).start();        Thread.sleep(400);        new Thread(consumer).start();    }}